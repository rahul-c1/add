[{"name":"app.R","content":"# app.R\n\nlibrary(shiny)\nlibrary(DT) # For interactive tables with editing capabilities\nlibrary(readr) # For robust CSV reading/writing\nlibrary(dplyr) # For data manipulation (summarizing, grouping)\n\n# Define the path for the CSV file\n# It's good practice to put this in a data/ directory or similar\ndata_file_path <- \"trade_data.csv\"\n\n# --- UI Definition ---\nui <- fluidPage(\n  # Add a custom title for the browser tab\n  title = \"Trade Management App\",\n  \n  # Load a nice font (Inter) and apply some basic styling\n  tags$head(\n    tags$link(href = \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\", rel = \"stylesheet\"),\n    tags$style(HTML(\"\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #f4f7f6; /* Light gray background */\n      }\n      .container-fluid {\n        max-width: 800px; /* Limit width for better readability */\n        margin-top: 30px;\n        background-color: #ffffff;\n        padding: 30px;\n        border-radius: 12px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n      }\n      h2 {\n        color: #333;\n        font-weight: 600;\n        margin-bottom: 25px;\n        text-align: center;\n      }\n      .form-group label {\n        font-weight: 500;\n        color: #555;\n        margin-bottom: 5px;\n      }\n      .form-control {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 10px 12px;\n        font-size: 16px;\n      }\n      .btn-primary {\n        background-color: #4A90E2; /* Blue */\n        border-color: #4A90E2;\n        border-radius: 8px;\n        padding: 12px 25px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n      }\n      .btn-primary:hover {\n        background-color: #357ABD;\n        border-color: #357ABD;\n        transform: translateY(-1px);\n      }\n      .btn-default {\n        background-color: #e0e0e0; /* Light gray */\n        border-color: #e0e0e0;\n        color: #555;\n        border-radius: 8px;\n        padding: 12px 25px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n      }\n      .btn-default:hover {\n        background-color: #c0c0c0;\n        border-color: #c0c0c0;\n        transform: translateY(-1px);\n      }\n      .tabbable > .nav > li > a {\n        font-weight: 500;\n        color: #666;\n        border-radius: 8px 8px 0 0;\n      }\n      .tabbable > .nav > li.active > a {\n        color: #4A90E2;\n        border-bottom: 3px solid #4A90E2;\n        background-color: #f8f8f8;\n      }\n      .dataTables_wrapper .dataTables_filter input {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 8px 12px;\n      }\n      .dataTables_wrapper .dataTables_length select {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 8px 12px;\n      }\n    \"))\n  ),\n  \n  # Main panel with tabs\n  tabsetPanel(\n    id = \"main_tabs\",\n    type = \"tabs\", # Use 'tabs' for the classic tab look\n    \n    # --- Tab 1: Add New Trade ---\n    tabPanel(\n      \"Add New Trade\",\n      icon = icon(\"plus-circle\"), # Add an icon for the tab\n      h2(\"ADD NEW TRADE\"),\n      fluidRow(\n        column(6, dateInput(\"tradeDate\", \"DATE *\", value = Sys.Date(), format = \"mm/dd/yyyy\")),\n        column(6, selectInput(\"portfolio\", \"PORTFOLIO\", choices = c(\"My Portfolio\", \"Portfolio A\", \"Portfolio B\"), selected = \"My Portfolio\"))\n      ),\n      fluidRow(\n        column(6, selectInput(\"activity\", \"ACTIVITY *\", choices = c(\"Long\", \"Short\", \"Option Call\", \"Option Put\"), selected = \"Long\")),\n        column(6, textInput(\"symbol\", \"SYMBOL *\", placeholder = \"Enter symbol...\"))\n      ),\n      fluidRow(\n        column(6, numericInput(\"sharesBought\", \"SHARES BOUGHT *\", value = 0, min = 0)),\n        column(6, numericInput(\"entryPrice\", \"ENTRY PRICE *\", value = 0.00, min = 0, step = 0.01))\n      ),\n      fluidRow(\n        column(6, numericInput(\"commission\", \"COMMISSION\", value = 0.00, min = 0, step = 0.01)),\n        column(6, numericInput(\"stopLoss\", \"STOP LOSS\", value = 0.00, min = 0, step = 0.01))\n      ),\n      # New rows for the additional columns\n      fluidRow(\n        column(6, numericInput(\"targetPrice\", \"TARGET PRICE\", value = NULL, min = 0, step = 0.01)),\n        column(6, dateInput(\"targetDate\", \"TARGET DATE\", value = NULL, format = \"mm/dd/yyyy\"))\n      ),\n      fluidRow(\n        column(6, dateInput(\"exitDate\", \"EXIT DATE\", value = NULL, format = \"mm/dd/yyyy\")),\n        column(6, numericInput(\"exitPrice\", \"EXIT PRICE\", value = NULL, min = 0, step = 0.01))\n      ),\n      fluidRow(\n        column(12, textInput(\"entryNote\", \"ENTRY NOTE\", placeholder = \"Enter entry note...\"))\n      ),\n      hr(), # Horizontal rule for separation\n      fluidRow(\n        column(6, actionButton(\"addTrade\", \"ADD NEW TRADE\", class = \"btn-primary w-full\")),\n        column(6, actionButton(\"clearAll\", \"CLEAR ALL\", class = \"btn-default w-full\"))\n      ),\n      br(), # Line break for spacing\n      textOutput(\"saveStatus\") # Display status messages\n    ),\n    \n    # --- Tab 2: View/Edit Data ---\n    tabPanel(\n      \"View/Edit Data\",\n      icon = icon(\"table\"), # Add an icon for the tab\n      h2(\"VIEW AND EDIT TRADE DATA\"),\n      DTOutput(\"tradeDataTable\"), # Display the data table\n      br(),\n      downloadButton(\"downloadData\", \"Download Data\", class = \"btn-primary\") # Button to download data\n    ),\n    \n    # --- Tab 3: Trade Summary ---\n    tabPanel(\n      \"Trade Summary\",\n      icon = icon(\"chart-bar\"), # Add an icon for the tab\n      h2(\"TRADE SUMMARY\"),\n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"summaryDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30, # Default to last 30 days\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      hr(),\n      DTOutput(\"tradeSummaryTable\") # Display the summary table\n    ),\n    \n    # --- Tab 4: Daily Symbols Summary ---\n    tabPanel(\n      \"Daily Symbols\",\n      icon = icon(\"calendar-alt\"), # Add an icon for the tab\n      h2(\"DAILY TRADING SYMBOLS\"),\n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"dailySymbolsDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30, # Default to last 30 days\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      hr(),\n      DTOutput(\"dailySymbolsTable\") # Display the daily symbols table\n    ),\n    # --- Tab 5: Portfolio by Symbol Summary ---\n    tabPanel(\n      \"Portfolio by Symbol\",\n      icon = icon(\"layer-group\"),\n      h2(\"PORTFOLIO SUMMARY BY SYMBOL AND DATE\"),\n      \n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"portfolioSymbolDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30,\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      \n      hr(),\n      h4(\"Detailed Portfolio Summary (Grouped by Date, Portfolio, Symbol)\"),\n      DTOutput(\"portfolioSymbolSummaryTable\"),\n      br(),\n      downloadButton(\"downloadPortfolioSymbolSummary\", \"Download Full Summary\", class = \"btn-primary\"),\n      \n      hr(),\n      h4(\"Symbols Traded by Date and Portfolio\"),\n      DTOutput(\"symbolsByDatePortfolioTable\"),\n      \n      hr(),\n      h4(\"Symbols Traded by Portfolio\"),\n      DTOutput(\"symbolsByPortfolioTable\"),\n      \n      hr(),\n      h4(\"Performance Breakdown by Activity Type\"),\n      DTOutput(\"portfolioActivitySummaryTable\"),\n      \n      hr(),\n      h4(\"Cumulative Return by Portfolio\"),\n      DTOutput(\"portfolioReturnSummaryTable\")\n    )\n    \n  \n  )\n)\n\n# --- Server Logic ---\nserver <- function(input, output, session) {\n  \n  # Reactive value to store the trade data\n  # This makes it easy to update the data and trigger UI updates\n  trade_data <- reactiveVal(\n    if (file.exists(data_file_path)) {\n      print(\"FILE EXISTS\")\n      read_csv(data_file_path, show_col_types = FALSE)\n    } else {\n      # Initialize an empty data frame with correct column names and types\n      data.frame(\n        Date = as.Date(character()),\n        Portfolio = character(),\n        Activity = character(),\n        Symbol = character(),\n        SharesBought = numeric(),\n        EntryPrice = numeric(),\n        Commission = numeric(),\n        EntryNote = character(),\n        StopLoss = numeric(),\n        TargetPrice = numeric(), # New column\n        TargetDate = as.Date(character()), # New column\n        ExitDate = as.Date(character()), # New column\n        ExitPrice = numeric(), # New column\n        stringsAsFactors = FALSE\n      )\n    }\n  )\n  \n  # Function to save data to CSV\n  save_data <- function(data) {\n    write_csv(data, data_file_path)\n  }\n  \n  # Observe event for \"ADD NEW TRADE\" button\n  observeEvent(input$addTrade, {\n    # Validate required fields\n    if (is.null(input$symbol) || input$symbol == \"\" ||\n        is.null(input$sharesBought) || input$sharesBought == 0 ||\n        is.null(input$entryPrice) || input$entryPrice == 0) {\n      output$saveStatus <- renderText({\n        \"Please fill in all required fields (Date, Symbol, Shares Bought, Entry Price).\"\n      })\n      return()\n    }\n    \n    # Calculate default Target Price and Target Date if not provided\n    calculated_target_price <- if (is.null(input$targetPrice) || input$targetPrice == 0) {\n      input$entryPrice * 1.08\n    } else {\n      input$targetPrice\n    }\n    \n    calculated_target_date <- if (is.null(input$targetDate)) {\n      input$tradeDate + 3\n    } else {\n      input$targetDate\n    }\n    \n    # Create a new row of data from inputs\n    new_trade_row <- data.frame(\n      Date = as.Date(input$tradeDate),\n      Portfolio = input$portfolio,\n      Activity = input$activity,\n      Symbol = toupper(input$symbol), # Convert symbol to uppercase\n      SharesBought = input$sharesBought,\n      EntryPrice = input$entryPrice,\n      Commission = input$commission,\n      EntryNote = input$entryNote,\n      StopLoss = input$stopLoss,\n      TargetPrice = calculated_target_price, # Use calculated or user-provided value\n      TargetDate = calculated_target_date, # Use calculated or user-provided value\n      # Fix: Ensure NA_Date_ and NA_real_ are used for NULL/empty inputs\n      ExitDate = if (is.null(input$exitDate)) as.Date(NA) else as.Date(input$exitDate),\n      ExitPrice = if (is.na(input$exitPrice)) as.numeric(NA) else input$exitPrice,\n      stringsAsFactors = FALSE\n    )\n    \n    # Append new row to existing data\n    current_data <- trade_data()\n    updated_data <- rbind(current_data, new_trade_row)\n    \n    # Update the reactive value\n    trade_data(updated_data)\n    \n    # Save to CSV\n    save_data(updated_data)\n    \n    # Display success message\n    output$saveStatus <- renderText({\n      paste(\"Trade for\", input$symbol, \"added successfully!\")\n    })\n    \n    # Clear inputs after adding\n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL) # Clear to NULL\n    updateDateInput(session, \"targetDate\", value = NULL) # Clear to NULL\n    updateDateInput(session, \"exitDate\", value = NULL) # Clear to NULL\n    updateNumericInput(session, \"exitPrice\", value = NULL) # Clear to NULL\n  })\n  \n  # Observe event for \"CLEAR ALL\" button\n  observeEvent(input$clearAll, {\n    # Clear all input fields\n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL)\n    updateDateInput(session, \"targetDate\", value = NULL)\n    updateDateInput(session, \"exitDate\", value = NULL)\n    updateNumericInput(session, \"exitPrice\", value = NULL)\n    \n    output$saveStatus <- renderText({\n      \"All fields cleared.\"\n    })\n  })\n  \n  # Render the data table for viewing/editing\n  output$tradeDataTable <- renderDT({\n    datatable(\n      trade_data(),\n      editable = TRUE, # Enable editing\n      options = list(\n        pageLength = 10, # Number of rows per page\n        scrollX = TRUE # Enable horizontal scrolling for wide tables\n      ),\n      rownames = FALSE, # Do not show row numbers\n      selection = 'none' # No row selection\n    )\n  })\n  \n# Observe event for editing cells in the data table\n  observeEvent(input$tradeDataTable_cell_edit, {\n    info <- input$tradeDataTable_cell_edit\n    \n    row_index <- info$row\n    col_index <- info$col + 1  # FIX: Adjust for 0-based indexing\n    new_value <- info$value\n    \n    current_data <- trade_data()\n    col_name <- names(current_data)[col_index]\n    \n    updated_value <- NA\n    \n    if (col_name %in% c(\"SharesBought\", \"EntryPrice\", \"Commission\", \"StopLoss\", \"TargetPrice\", \"ExitPrice\")) {\n      updated_value <- if (new_value == \"\") NA else suppressWarnings(as.numeric(new_value))\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid input for numeric field '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else if (col_name %in% c(\"Date\", \"TargetDate\", \"ExitDate\")) {\n      updated_value <- if (new_value == \"\") as.Date(NA) else tryCatch(as.Date(new_value), error = function(e) NA)\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid date format for '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else {\n      updated_value <- as.character(new_value)\n    }\n    \n    temp_data <- current_data\n    temp_data[row_index, col_index] <- updated_value\n    \n    trade_data(temp_data)\n    save_data(temp_data)\n    \n    showNotification(\"Trade data updated and saved successfully!\", type = \"message\", duration = 2)\n  })\n  \n  \n  # Download handler for the \"Download Data\" button\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"trade_data-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(trade_data(), file)\n    }\n  )\n  \n  # Reactive expression for filtered trade data for summary\n  filtered_summary_data <- reactive({\n    req(input$summaryDateRange) # Ensure date range input is available\n    \n    data <- trade_data()\n    \n    # Filter by date range\n    if (!is.null(input$summaryDateRange[1]) && !is.null(input$summaryDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$summaryDateRange[1] & Date <= input$summaryDateRange[2])\n    }\n    data\n  })\n  \n  # Reactive expression for summarized trade data\n  summarized_trades <- reactive({\n    filtered_summary_data() %>%\n      group_by(Date, Symbol, Activity) %>% # Group by Date, Symbol, and Activity\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        WeightedAvgEntryPrice = sum(EntryPrice * SharesBought, na.rm = TRUE) / sum(SharesBought, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE), # Include in summary\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE), # Include in summary\n        .groups = 'drop' # Drop grouping after summarizing\n      ) %>%\n      arrange(Date, Symbol) # Order for better readability\n  })\n  \n  # Render the summary data table\n  output$tradeSummaryTable <- renderDT({\n    datatable(\n      summarized_trades(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  \n  # Reactive expression for filtered daily symbols data\n  filtered_daily_symbols_data <- reactive({\n    req(input$dailySymbolsDateRange) # Ensure date range input is available\n    \n    data <- trade_data()\n    \n    # Filter by date range\n    if (!is.null(input$dailySymbolsDateRange[1]) && !is.null(input$dailySymbolsDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$dailySymbolsDateRange[1] & Date <= input$dailySymbolsDateRange[2])\n    }\n    data\n  })\n  \n  # Reactive expression for summarized daily symbols\n  daily_summarized_symbols <- reactive({\n    filtered_daily_symbols_data() %>%\n      group_by(Date) %>% # Group only by Date\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"), # Concatenate unique symbols, sorted\n        .groups = 'drop' # Drop grouping after summarizing\n      ) %>%\n      arrange(Date) # Order by date\n  })\n  \n  \n  # Render the daily symbols summary table\n  output$dailySymbolsTable <- renderDT({\n    datatable(\n      daily_summarized_symbols(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE,\n        dom = 'tp' # Only show table and pagination, hide search/length\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n\n  \n  # Filtered data for all Portfolio-based summaries\n  filtered_portfolio_symbol_data <- reactive({\n    req(input$portfolioSymbolDateRange)\n    data <- trade_data()\n    \n    if (!is.null(input$portfolioSymbolDateRange[1]) && !is.null(input$portfolioSymbolDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$portfolioSymbolDateRange[1] & Date <= input$portfolioSymbolDateRange[2])\n    }\n    data\n  })\n  \n  # 1. Main Summary Grouped by Date, Portfolio, Symbol\n  portfolio_symbol_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = round(ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),2),\n        UnrealizedGain = round(ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),2),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = round(ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA),2)\n      ) %>%\n      group_by(Date, Portfolio, Symbol) %>%\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        AvgEntryPrice = mean(EntryPrice, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE),\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        ReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio, Symbol)\n  })\n  \n  \n  # 2. Symbols grouped by Date and Portfolio\n  symbols_by_date_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Date, Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio)\n  })\n  \n  # 3. Symbols grouped by Portfolio (across full date range)\n  symbols_by_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  # Render tables\n  output$portfolioSymbolSummaryTable <- renderDT({\n    datatable(\n      portfolio_symbol_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByDatePortfolioTable <- renderDT({\n    datatable(\n      symbols_by_date_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByPortfolioTable <- renderDT({\n    datatable(\n      symbols_by_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  # Download handler for full summary\n  output$downloadPortfolioSymbolSummary <- downloadHandler(\n    filename = function() {\n      paste(\"portfolio_symbol_summary-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(portfolio_symbol_summary(), file)\n    }\n  )\n  \n  \n  portfolio_activity_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA)\n      ) %>%\n      group_by(Portfolio, Activity) %>%\n      summarise(\n        TotalTrades = n(),\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        AvgReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio, Activity)\n  })\n  \n  portfolio_return_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission\n      ) %>%\n      group_by(Portfolio) %>%\n      summarise(\n        TotalEntryValue = sum(EntryValue, na.rm = TRUE),\n        TotalRealized = sum(RealizedGain, na.rm = TRUE),\n        TotalUnrealized = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        TotalNetPL = sum(NetPL, na.rm = TRUE),\n        CumulativeReturnPct = ifelse(TotalEntryValue > 0, TotalNetPL / TotalEntryValue * 100, NA),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  output$portfolioActivitySummaryTable <- renderDT({\n  datatable(\n    portfolio_activity_summary(),\n    options = list(pageLength = 10, scrollX = TRUE),\n    rownames = FALSE\n  ) %>%\n    formatCurrency(c(\"RealizedGain\", \"UnrealizedGain\", \"NetPL\", \"TotalCommission\"), \"$\") %>%\n    formatPercentage(\"AvgReturnPct\", digits = 2)\n})\n\noutput$portfolioReturnSummaryTable <- renderDT({\n  datatable(\n    portfolio_return_summary(),\n    options = list(pageLength = 10, scrollX = TRUE),\n    rownames = FALSE\n  ) %>%\n    formatCurrency(c(\"TotalRealized\", \"TotalUnrealized\", \"TotalNetPL\", \"TotalCommission\", \"TotalEntryValue\"), \"$\") %>%\n    formatPercentage(\"CumulativeReturnPct\", digits = 2)\n})\n\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"app_gdrive.R","content":"# app.R\n\nlibrary(shiny)\nlibrary(DT) # For interactive tables with editing capabilities\nlibrary(readr) # For robust CSV reading/writing\nlibrary(dplyr) # For data manipulation (summarizing, grouping)\nlibrary(googledrive) # For Google Drive integration\n\n# Define the local path for the CSV file (still used as an intermediate)\ndata_file_path <- \"trade_data.csv\"\n# Define the Google Drive file name\ngoogle_drive_file_name <- \"trade_data.csv\"\n\n# --- UI Definition ---\nui <- fluidPage(\n  # Add a custom title for the browser tab\n  title = \"Trade Management App\",\n  \n  # Load a nice font (Inter) and apply some basic styling\n  tags$head(\n    tags$link(href = \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\", rel = \"stylesheet\"),\n    tags$style(HTML(\"\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #f4f7f6; /* Light gray background */\n      }\n      .container-fluid {\n        max-width: 800px; /* Limit width for better readability */\n        margin-top: 30px;\n        background-color: #ffffff;\n        padding: 30px;\n        border-radius: 12px;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n      }\n      h2 {\n        color: #333;\n        font-weight: 600;\n        margin-bottom: 25px;\n        text-align: center;\n      }\n      .form-group label {\n        font-weight: 500;\n        color: #555;\n        margin-bottom: 5px;\n      }\n      .form-control {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 10px 12px;\n        font-size: 16px;\n      }\n      .btn-primary {\n        background-color: #4A90E2; /* Blue */\n        border-color: #4A90E2;\n        border-radius: 8px;\n        padding: 12px 25px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n      }\n      .btn-primary:hover {\n        background-color: #357ABD;\n        border-color: #357ABD;\n        transform: translateY(-1px);\n      }\n      .btn-default {\n        background-color: #e0e0e0; /* Light gray */\n        border-color: #e0e0e0;\n        color: #555;\n        border-radius: 8px;\n        padding: 12px 25px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n      }\n      .btn-default:hover {\n        background-color: #c0c0c0;\n        border-color: #c0c0c0;\n        transform: translateY(-1px);\n      }\n      .tabbable > .nav > li > a {\n        font-weight: 500;\n        color: #666;\n        border-radius: 8px 8px 0 0;\n      }\n      .tabbable > .nav > li.active > a {\n        color: #4A90E2;\n        border-bottom: 3px solid #4A90E2;\n        background-color: #f8f8f8;\n      }\n      .dataTables_wrapper .dataTables_filter input {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 8px 12px;\n      }\n      .dataTables_wrapper .dataTables_length select {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 8px 12px;\n      }\n    \"))\n  ),\n  \n  # Main panel with tabs\n  tabsetPanel(\n    id = \"main_tabs\",\n    type = \"tabs\", # Use 'tabs' for the classic tab look\n    \n    # --- Tab 1: Add New Trade ---\n    tabPanel(\n      \"Add New Trade\",\n      icon = icon(\"plus-circle\"), # Add an icon for the tab\n      h2(\"ADD NEW TRADE\"),\n      fluidRow(\n        column(6, dateInput(\"tradeDate\", \"DATE *\", value = Sys.Date(), format = \"mm/dd/yyyy\")),\n        column(6, selectInput(\"portfolio\", \"PORTFOLIO\", choices = c(\"My Portfolio\", \"Portfolio A\", \"Portfolio B\"), selected = \"My Portfolio\"))\n      ),\n      fluidRow(\n        column(6, selectInput(\"activity\", \"ACTIVITY *\", choices = c(\"Long\", \"Short\", \"Option Call\", \"Option Put\"), selected = \"Long\")),\n        column(6, textInput(\"symbol\", \"SYMBOL *\", placeholder = \"Enter symbol...\"))\n      ),\n      fluidRow(\n        column(6, numericInput(\"sharesBought\", \"SHARES BOUGHT *\", value = 0, min = 0)),\n        column(6, numericInput(\"entryPrice\", \"ENTRY PRICE *\", value = 0.00, min = 0, step = 0.01))\n      ),\n      fluidRow(\n        column(6, numericInput(\"commission\", \"COMMISSION\", value = 0.00, min = 0, step = 0.01)),\n        column(6, numericInput(\"stopLoss\", \"STOP LOSS\", value = 0.00, min = 0, step = 0.01))\n      ),\n      # New rows for the additional columns\n      fluidRow(\n        column(6, numericInput(\"targetPrice\", \"TARGET PRICE\", value = NULL, min = 0, step = 0.01)),\n        column(6, dateInput(\"targetDate\", \"TARGET DATE\", value = NULL, format = \"mm/dd/yyyy\"))\n      ),\n      fluidRow(\n        column(6, dateInput(\"exitDate\", \"EXIT DATE\", value = NULL, format = \"mm/dd/yyyy\")),\n        column(6, numericInput(\"exitPrice\", \"EXIT PRICE\", value = NULL, min = 0, step = 0.01))\n      ),\n      fluidRow(\n        column(12, textInput(\"entryNote\", \"ENTRY NOTE\", placeholder = \"Enter entry note...\"))\n      ),\n      hr(), # Horizontal rule for separation\n      fluidRow(\n        column(6, actionButton(\"addTrade\", \"ADD NEW TRADE\", class = \"btn-primary w-full\")),\n        column(6, actionButton(\"clearAll\", \"CLEAR ALL\", class = \"btn-default w-full\"))\n      ),\n      br(), # Line break for spacing\n      textOutput(\"saveStatus\") # Display status messages\n    ),\n    \n    # --- Tab 2: View/Edit Data ---\n    tabPanel(\n      \"View/Edit Data\",\n      icon = icon(\"table\"), # Add an icon for the tab\n      h2(\"VIEW AND EDIT TRADE DATA\"),\n      DTOutput(\"tradeDataTable\"), # Display the data table\n      br(),\n      downloadButton(\"downloadData\", \"Download Data\", class = \"btn-primary\") # Button to download data\n    ),\n    \n    # --- Tab 3: Trade Summary ---\n    tabPanel(\n      \"Trade Summary\",\n      icon = icon(\"chart-bar\"), # Add an icon for the tab\n      h2(\"TRADE SUMMARY\"),\n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"summaryDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30, # Default to last 30 days\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      hr(),\n      DTOutput(\"tradeSummaryTable\") # Display the summary table\n    ),\n    \n    # --- Tab 4: Daily Symbols Summary ---\n    tabPanel(\n      \"Daily Symbols\",\n      icon = icon(\"calendar-alt\"), # Add an icon for the tab\n      h2(\"DAILY TRADING SYMBOLS\"),\n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"dailySymbolsDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30, # Default to last 30 days\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      hr(),\n      DTOutput(\"dailySymbolsTable\") # Display the daily symbols table\n    ),\n    # --- Tab 5: Portfolio by Symbol Summary ---\n    tabPanel(\n      \"Portfolio by Symbol\",\n      icon = icon(\"layer-group\"),\n      h2(\"PORTFOLIO SUMMARY BY SYMBOL AND DATE\"),\n      \n      fluidRow(\n        column(12,\n               dateRangeInput(\n                 \"portfolioSymbolDateRange\",\n                 \"Filter by Date:\",\n                 start = Sys.Date() - 30,\n                 end = Sys.Date(),\n                 format = \"mm/dd/yyyy\"\n               )\n        )\n      ),\n      \n      hr(),\n      h4(\"Detailed Portfolio Summary (Grouped by Date, Portfolio, Symbol)\"),\n      DTOutput(\"portfolioSymbolSummaryTable\"),\n      br(),\n      downloadButton(\"downloadPortfolioSymbolSummary\", \"Download Full Summary\", class = \"btn-primary\"),\n      \n      hr(),\n      h4(\"Symbols Traded by Date and Portfolio\"),\n      DTOutput(\"symbolsByDatePortfolioTable\"),\n      \n      hr(),\n      h4(\"Symbols Traded by Portfolio\"),\n      DTOutput(\"symbolsByPortfolioTable\"),\n      \n      hr(),\n      h4(\"Performance Breakdown by Activity Type\"),\n      DTOutput(\"portfolioActivitySummaryTable\"),\n      \n      hr(),\n      h4(\"Cumulative Return by Portfolio\"),\n      DTOutput(\"portfolioReturnSummaryTable\")\n    )\n    \n  )\n)\n\n# --- Server Logic ---\nserver <- function(input, output, session) {\n  \n  # Reactive value to store the Google Drive authentication status\n  auth_status <- reactiveVal(FALSE)\n  # Flag to ensure authentication runs only once\n  authenticated_on_startup <- reactiveVal(FALSE) \n  \n  # Perform Google Drive authentication on startup\n  observe({\n    if (!authenticated_on_startup()) {\n      tryCatch({\n        drive_auth(cache = \".secrets\") # Cache credentials for re-use\n        auth_status(TRUE)\n        authenticated_on_startup(TRUE) # Set flag to TRUE after successful authentication\n        showNotification(\"Successfully authenticated with Google Drive!\", type = \"message\")\n      }, error = function(e) {\n        showNotification(paste(\"Google Drive authentication failed: \", e$message), type = \"error\", duration = NULL)\n        auth_status(FALSE)\n      })\n    }\n  }, priority = 100) # Give this observer high priority to run early\n  \n  # Function to read data from Google Drive\n  read_data_from_drive <- function() {\n    # No longer needing req(authenticated_on_startup()) here as it's called from an observeEvent\n    \n    if (auth_status()) {\n      tryCatch({\n        # Check if file exists on Google Drive\n        drive_file_info <- drive_find(pattern = google_drive_file_name, trashed = FALSE, verbose = FALSE)\n        \n        if (nrow(drive_file_info) > 0) {\n          # Download the file\n          drive_download(\n            file = drive_file_info$id[1], # Take the first match if multiple exist\n            path = data_file_path,\n            overwrite = TRUE,\n            verbose = FALSE\n          )\n          read_csv(data_file_path, show_col_types = FALSE)\n        } else {\n          # If file doesn't exist on Drive, initialize empty dataframe and upload it\n          message(\"File not found on Google Drive. Initializing new dataframe.\")\n          empty_df <- data.frame(\n            Date = as.Date(character()),\n            Portfolio = character(),\n            Activity = character(),\n            Symbol = character(),\n            SharesBought = numeric(),\n            EntryPrice = numeric(),\n            Commission = numeric(),\n            EntryNote = character(),\n            StopLoss = numeric(),\n            TargetPrice = numeric(),\n            TargetDate = as.Date(character()),\n            ExitDate = as.Date(character()),\n            ExitPrice = numeric(),\n            stringsAsFactors = FALSE\n          )\n          write_csv(empty_df, data_file_path)\n          drive_upload(media = data_file_path, name = google_drive_file_name, verbose = FALSE)\n          showNotification(\"New data file created and uploaded to Google Drive.\", type = \"warning\")\n          empty_df\n        }\n      }, error = function(e) {\n        showNotification(paste(\"Error reading from Google Drive: \", e$message), type = \"error\", duration = NULL)\n        # Fallback to local file if Drive read fails\n        if (file.exists(data_file_path)) {\n          read_csv(data_file_path, show_col_types = FALSE)\n        } else {\n          data.frame(\n            Date = as.Date(character()),\n            Portfolio = character(),\n            Activity = character(),\n            Symbol = character(),\n            SharesBought = numeric(),\n            EntryPrice = numeric(),\n            Commission = numeric(),\n            EntryNote = character(),\n            StopLoss = numeric(),\n            TargetPrice = numeric(),\n            TargetDate = as.Date(character()),\n            ExitDate = as.Date(character()),\n            ExitPrice = numeric(),\n            stringsAsFactors = FALSE\n          )\n        }\n      })\n    } else {\n      showNotification(\"Not authenticated with Google Drive. Loading local data (if available).\", type = \"warning\", duration = 5)\n      if (file.exists(data_file_path)) {\n        read_csv(data_file_path, show_col_types = FALSE)\n      } else {\n        data.frame(\n          Date = as.Date(character()),\n          Portfolio = character(),\n          Activity = character(),\n          Symbol = character(),\n          SharesBought = numeric(),\n          EntryPrice = numeric(),\n          Commission = numeric(),\n          EntryNote = character(),\n          StopLoss = numeric(),\n          TargetPrice = numeric(),\n          TargetDate = as.Date(character()),\n          ExitDate = as.Date(character()),\n          ExitPrice = numeric(),\n          stringsAsFactors = FALSE\n        )\n      }\n    }\n  }\n  \n  # Reactive value to store the trade data\n  # Initialize with an empty dataframe directly\n  trade_data <- reactiveVal(\n    data.frame(\n      Date = as.Date(character()),\n      Portfolio = character(),\n      Activity = character(),\n      Symbol = character(),\n      SharesBought = numeric(),\n      EntryPrice = numeric(),\n      Commission = numeric(),\n      EntryNote = character(),\n      StopLoss = numeric(),\n      TargetPrice = numeric(),\n      TargetDate = as.Date(character()),\n      ExitDate = as.Date(character()),\n      ExitPrice = numeric(),\n      stringsAsFactors = FALSE\n    )\n  )\n  \n  # Trigger initial data load once authentication status is set\n  observeEvent(authenticated_on_startup(), {\n    if(authenticated_on_startup()) {\n      trade_data(read_data_from_drive())\n    }\n  }, ignoreInit = TRUE) \n  \n  # Function to save data to CSV locally and then upload to Google Drive\n  save_data <- function(data) {\n    write_csv(data, data_file_path) # Save locally first\n    \n    if (auth_status()) {\n      tryCatch({\n        drive_file_info <- drive_find(pattern = google_drive_file_name, trashed = FALSE, verbose = FALSE)\n        if (nrow(drive_file_info) > 0) {\n          drive_update(file = drive_file_info$id[1], media = data_file_path, verbose = FALSE)\n          showNotification(\"Data updated on Google Drive.\", type = \"success\", duration = 2)\n        } else {\n          drive_upload(media = data_file_path, name = google_drive_file_name, verbose = FALSE)\n          showNotification(\"Data uploaded to Google Drive.\", type = \"success\", duration = 2)\n        }\n      }, error = function(e) {\n        showNotification(paste(\"Error uploading to Google Drive: \", e$message), type = \"error\", duration = NULL)\n      })\n    } else {\n      showNotification(\"Not authenticated with Google Drive. Data saved locally only.\", type = \"warning\")\n    }\n  }\n  \n  # Observe event for \"ADD NEW TRADE\" button\n  observeEvent(input$addTrade, {\n    # Validate required fields\n    if (is.null(input$symbol) || input$symbol == \"\" ||\n        is.null(input$sharesBought) || input$sharesBought == 0 ||\n        is.null(input$entryPrice) || input$entryPrice == 0) {\n      output$saveStatus <- renderText({\n        \"Please fill in all required fields (Date, Symbol, Shares Bought, Entry Price).\"\n      })\n      return()\n    }\n    \n    # Calculate default Target Price and Target Date if not provided\n    calculated_target_price <- if (is.null(input$targetPrice) || input$targetPrice == 0) {\n      input$entryPrice * 1.08\n    } else {\n      input$targetPrice\n    }\n    \n    calculated_target_date <- if (is.null(input$targetDate)) {\n      input$tradeDate + 3\n    } else {\n      input$targetDate\n    }\n    \n    # Create a new row of data from inputs\n    new_trade_row <- data.frame(\n      Date = as.Date(input$tradeDate),\n      Portfolio = input$portfolio,\n      Activity = input$activity,\n      Symbol = toupper(input$symbol), # Convert symbol to uppercase\n      SharesBought = input$sharesBought,\n      EntryPrice = input$entryPrice,\n      Commission = input$commission,\n      EntryNote = input$entryNote,\n      StopLoss = input$stopLoss,\n      TargetPrice = calculated_target_price, # Use calculated or user-provided value\n      TargetDate = calculated_target_date, # Use calculated or user-provided value\n      # Fix: Ensure NA_Date_ and NA_real_ are used for NULL/empty inputs\n      ExitDate = if (is.null(input$exitDate)) as.Date(NA) else as.Date(input$exitDate),\n      ExitPrice = if (is.na(input$exitPrice)) as.numeric(NA) else input$exitPrice,\n      stringsAsFactors = FALSE\n    )\n    \n    # Append new row to existing data\n    current_data <- trade_data()\n    updated_data <- rbind(current_data, new_trade_row)\n    \n    # Update the reactive value\n    trade_data(updated_data)\n    \n    # Save to CSV and Google Drive\n    save_data(updated_data)\n    \n    # Display success message\n    output$saveStatus <- renderText({\n      paste(\"Trade for\", input$symbol, \"added successfully!\")\n    })\n    \n    # Clear inputs after adding\n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL) # Clear to NULL\n    updateDateInput(session, \"targetDate\", value = NULL) # Clear to NULL\n    updateDateInput(session, \"exitDate\", value = NULL) # Clear to NULL\n    updateNumericInput(session, \"exitPrice\", value = NULL) # Clear to NULL\n  })\n  \n  # Observe event for \"CLEAR ALL\" button\n  observeEvent(input$clearAll, {\n    # Clear all input fields\n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL)\n    updateDateInput(session, \"targetDate\", value = NULL)\n    updateDateInput(session, \"exitDate\", value = NULL)\n    updateNumericInput(session, \"exitPrice\", value = NULL)\n    \n    output$saveStatus <- renderText({\n      \"All fields cleared.\"\n    })\n  })\n  \n  # Render the data table for viewing/editing\n  output$tradeDataTable <- renderDT({\n    datatable(\n      trade_data(),\n      editable = TRUE, # Enable editing\n      options = list(\n        pageLength = 10, # Number of rows per page\n        scrollX = TRUE # Enable horizontal scrolling for wide tables\n      ),\n      rownames = FALSE, # Do not show row numbers\n      selection = 'none' # No row selection\n    )\n  })\n  \n  # Observe event for editing cells in the data table\n  observeEvent(input$tradeDataTable_cell_edit, {\n    info <- input$tradeDataTable_cell_edit\n    \n    row_index <- info$row\n    col_index <- info$col + 1  # FIX: Adjust for 0-based indexing\n    new_value <- info$value\n    \n    current_data <- trade_data()\n    col_name <- names(current_data)[col_index]\n    \n    updated_value <- NA\n    \n    if (col_name %in% c(\"SharesBought\", \"EntryPrice\", \"Commission\", \"StopLoss\", \"TargetPrice\", \"ExitPrice\")) {\n      updated_value <- if (new_value == \"\") NA else suppressWarnings(as.numeric(new_value))\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid input for numeric field '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else if (col_name %in% c(\"Date\", \"TargetDate\", \"ExitDate\")) {\n      updated_value <- if (new_value == \"\") as.Date(NA) else tryCatch(as.Date(new_value), error = function(e) NA)\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid date format for '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else {\n      updated_value <- as.character(new_value)\n    }\n    \n    temp_data <- current_data\n    temp_data[row_index, col_index] <- updated_value\n    \n    trade_data(temp_data)\n    save_data(temp_data) # Save to local CSV and Google Drive\n    \n    showNotification(\"Trade data updated and saved successfully!\", type = \"message\", duration = 2)\n  })\n  \n  \n  # Download handler for the \"Download Data\" button\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"trade_data-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(trade_data(), file)\n    }\n  )\n  \n  # Reactive expression for filtered trade data for summary\n  filtered_summary_data <- reactive({\n    req(input$summaryDateRange) # Ensure date range input is available\n    \n    data <- trade_data()\n    \n    # Filter by date range\n    if (!is.null(input$summaryDateRange[1]) && !is.null(input$summaryDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$summaryDateRange[1] & Date <= input$summaryDateRange[2])\n    }\n    data\n  })\n  \n  # Reactive expression for summarized trade data\n  summarized_trades <- reactive({\n    filtered_summary_data() %>%\n      group_by(Date, Symbol, Activity) %>% # Group by Date, Symbol, and Activity\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        WeightedAvgEntryPrice = sum(EntryPrice * SharesBought, na.rm = TRUE) / sum(SharesBought, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE), # Include in summary\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE), # Include in summary\n        .groups = 'drop' # Drop grouping after summarizing\n      ) %>%\n      arrange(Date, Symbol) # Order for better readability\n  })\n  \n  # Render the summary data table\n  # Render the summary data table\n  output$tradeSummaryTable <- renderDT({\n    datatable(\n      summarized_trades(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE\n      ),\n      rownames = FALSE,\n      selection = 'none' # Changed from 'none\" to 'none'\n    )\n  })\n  \n  \n  # Reactive expression for filtered daily symbols data\n  filtered_daily_symbols_data <- reactive({\n    req(input$dailySymbolsDateRange) # Ensure date range input is available\n    \n    data <- trade_data()\n    \n    # Filter by date range\n    if (!is.null(input$dailySymbolsDateRange[1]) && !is.null(input$dailySymbolsDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$dailySymbolsDateRange[1] & Date <= input$dailySymbolsDateRange[2])\n    }\n    data\n  })\n  \n  # Reactive expression for summarized daily symbols\n  daily_summarized_symbols <- reactive({\n    filtered_daily_symbols_data() %>%\n      group_by(Date) %>% # Group only by Date\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"), # Concatenate unique symbols, sorted\n        .groups = 'drop' # Drop grouping after summarizing\n      ) %>%\n      arrange(Date) # Order by date\n  })\n  \n  \n  # Render the daily symbols summary table\n  output$dailySymbolsTable <- renderDT({\n    datatable(\n      daily_summarized_symbols(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE,\n        dom = 'tp' # Only show table and pagination, hide search/length\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  \n  \n  # Filtered data for all Portfolio-based summaries\n  filtered_portfolio_symbol_data <- reactive({\n    req(input$portfolioSymbolDateRange)\n    data <- trade_data()\n    \n    if (!is.null(input$portfolioSymbolDateRange[1]) && !is.null(input$portfolioSymbolDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$portfolioSymbolDateRange[1] & Date <= input$portfolioSymbolDateRange[2])\n    }\n    data\n  })\n  \n  # 1. Main Summary Grouped by Date, Portfolio, Symbol\n  portfolio_symbol_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = round(ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),2),\n        UnrealizedGain = round(ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),2),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = round(ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA),2)\n      ) %>%\n      group_by(Date, Portfolio, Symbol) %>%\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        AvgEntryPrice = mean(EntryPrice, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE),\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        ReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio, Symbol)\n  })\n  \n  \n  # 2. Symbols grouped by Date and Portfolio\n  symbols_by_date_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Date, Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio)\n  })\n  \n  # 3. Symbols grouped by Portfolio (across full date range)\n  symbols_by_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  # Render tables\n  output$portfolioSymbolSummaryTable <- renderDT({\n    datatable(\n      portfolio_symbol_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByDatePortfolioTable <- renderDT({\n    datatable(\n      symbols_by_date_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByPortfolioTable <- renderDT({\n    datatable(\n      symbols_by_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  # Download handler for full summary\n  output$downloadPortfolioSymbolSummary <- downloadHandler(\n    filename = function() {\n      paste(\"portfolio_symbol_summary-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(portfolio_symbol_summary(), file)\n    }\n  )\n  \n  \n  portfolio_activity_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA)\n      ) %>%\n      group_by(Portfolio, Activity) %>%\n      summarise(\n        TotalTrades = n(),\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        AvgReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio, Activity)\n  })\n  \n  portfolio_return_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission\n      ) %>%\n      group_by(Portfolio) %>%\n      summarise(\n        TotalEntryValue = sum(EntryValue, na.rm = TRUE),\n        TotalRealized = sum(RealizedGain, na.rm = TRUE),\n        TotalUnrealized = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        TotalNetPL = sum(NetPL, na.rm = TRUE),\n        CumulativeReturnPct = ifelse(TotalEntryValue > 0, TotalNetPL / TotalEntryValue * 100, NA),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  output$portfolioActivitySummaryTable <- renderDT({\n    datatable(\n      portfolio_activity_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE\n    ) %>%\n      formatCurrency(c(\"RealizedGain\", \"UnrealizedGain\", \"NetPL\", \"TotalCommission\"), \"$\") %>%\n      formatPercentage(\"AvgReturnPct\", digits = 2)\n  })\n  \n  output$portfolioReturnSummaryTable <- renderDT({\n    datatable(\n      portfolio_return_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE\n    ) %>%\n      formatCurrency(c(\"TotalRealized\", \"TotalUnrealized\", \"TotalNetPL\", \"TotalCommission\", \"TotalEntryValue\"), \"$\") %>%\n      formatPercentage(\"CumulativeReturnPct\", digits = 2)\n  })\n  \n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"trade_data.csv","content":"Date,Portfolio,Activity,Symbol,SharesBought,EntryPrice,Commission,EntryNote,StopLoss,TargetPrice,TargetDate,ExitDate,ExitPrice,Bought\n2025-07-14,My Portfolio,Long,OKLO,10,56.11,0,malibu,54,62,2025-07-14,2025-07-14,NA,N\n","type":"text"}]
